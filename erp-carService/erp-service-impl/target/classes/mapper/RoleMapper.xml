<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ksit.erp.mapper.RoleMapper">
  <resultMap id="BaseResultMap" type="com.ksit.erp.entity.Role">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="role_name" jdbcType="VARCHAR" property="roleName" />
    <result column="role_code" jdbcType="VARCHAR" property="roleCode" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, role_name, role_code, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from role
    where id = #{id,jdbcType=INTEGER}
  </select>
    <!--验证角色是否存在-->
    <select id="validateRole" resultType="java.lang.Integer" parameterType="map">
      select count(1) from  role
      where
      <foreach collection="paramMap.keys" item="key" open="(" close=")" separator=",">
        ${key}
      </foreach>
      =
      <foreach collection="paramMap.keys" item="key" open="(" close=")" separator=",">
        #{paramMap[${key}]}
      </foreach>
    </select>

    <!--查询所有的角色和对应的权限列表-->
    <select id="listRoleWithPermission" resultType="com.ksit.erp.entity.Role" resultMap="roleWithPermissionMap">
        SELECT
            role.*,permission.permission_name
        FROM
            role
            LEFT JOIN role_permission ON role.id = role_permission.role_id
            LEFT JOIN permission ON role_permission.permission_id = permission.id
    </select>
    <!--根据id 查询对应的角色信息-->
    <select id="queryRoleById" resultType="com.ksit.erp.entity.Role" resultMap="roleWithPermissionMap">
      SELECT
        role.*,permission.*
      FROM
        role
        LEFT JOIN role_permission ON role.id = role_permission.role_id
        LEFT JOIN permission ON role_permission.permission_id = permission.id
      where role.id = #{id}
    </select>
    <select id="listRole" resultType="com.ksit.erp.entity.Role">
      select <include refid="Base_Column_List"/>
      from role
    </select>

    <!--根据账号 id 获取所有角色-->
    <select id="findRolesWithEmployeeId" resultType="com.ksit.erp.entity.Role">
      SELECT
        <include refid="Base_Column_List"/>
      FROM
        role
      WHERE
        id IN (
          SELECT
            role_id
          FROM
            employee_role
          WHERE
            employee_role.employee_id = #{id}
        )
    </select>

    <resultMap id="roleWithPermissionMap" type="com.ksit.erp.entity.Role" extends="BaseResultMap">
        <collection property="permissionList" ofType="com.ksit.erp.entity.Permission">
            <id property="id" column="id1"/>
            <result property="permissionName" column="permission_name"/>
            <result property="permissionCode" column="permission_code"/>
            <result property="permissionType" column="permission_type"/>
            <result property="createTime" column="create_time"/>
            <result property="updateTime" column="update_time"/>
        </collection>
    </resultMap>


    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ksit.erp.entity.Role" useGeneratedKeys="true" keyProperty="id">
    insert into role (id, role_name, role_code, 
      create_time, update_time)
    values (#{id,jdbcType=INTEGER}, #{roleName,jdbcType=VARCHAR}, #{roleCode,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.ksit.erp.entity.Role">
    insert into role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="roleName != null">
        role_name,
      </if>
      <if test="roleCode != null">
        role_code,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="roleName != null">
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleCode != null">
        #{roleCode,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ksit.erp.entity.Role">
    update role
    <set>
      <if test="roleName != null">
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleCode != null">
        role_code = #{roleCode,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ksit.erp.entity.Role">
    update role
    set role_name = #{roleName,jdbcType=VARCHAR},
      role_code = #{roleCode,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>